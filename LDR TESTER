// #define LDR_PIN A0
// #define LED_PIN 9
 
// int LdrValue = 0;
 
// void setup()
// {
//   pinMode(LED_PIN, OUTPUT);
// }
 
// void loop()
// {
//   LdrValue = analogRead(LDR_PIN);
//   if(LdrValue < 300)
//   {
//     digitalWrite(LED_PIN, HIGH);
//   }
//   else
//   {
//     digitalWrite(LED_PIN, LOW);
//   }
// }












#define FIRMWARE_VERSION "v1.0.0"

#define UART_BAUDRATE 9600

#define LDR_L_PIN A0 // Mapped to ATMega328P PCO (Pin 23) on Arduino Uno
#define LDR_R_PIN A1 // Mapped to ATMega328P PC1 (Pin 24) on Arduino Uno

#define ADC_RESOLUTION         10                    // 10-Bit ADC
#define ADC_OUTPUT_RANGE       (1 << ADC_RESOLUTION) // (2^10 = 1024)
#define ADC_FULL_SCALE_VOLTAGE 5.0                   // Full-Scale Voltage

#define UPDATE_PERIOD_MS 1000

// Function to measure LDR Circuit Voltage
void MeasureLDRCircuitVoltage(int PinNumber)
{
  int   AnalogReadResult;
  float LDRCircuitVoltage;
  
  // Calculate the voltage per ADC output code
  const float VoltagePerADCCode = (ADC_FULL_SCALE_VOLTAGE / ADC_OUTPUT_RANGE);
  
  // Measure the voltage from the LDR circuit using ADC
  AnalogReadResult = analogRead(PinNumber);
  
  // Calculate the circuit voltage from the ADC output code
  LDRCircuitVoltage = AnalogReadResult * VoltagePerADCCode;
  
  // Output results to console
  Serial.print("ADC Output Code: ");
  Serial.println(AnalogReadResult);
  Serial.print("LDR Circuit Voltage: ");
  Serial.print(LDRCircuitVoltage);
  Serial.println("V");
  Serial.println();
}

// Setup function runs once when board is powered up or reset
void setup()
{
  // Initialise UART
  Serial.begin(UART_BAUDRATE);
  
  // Output message to console
  Serial.println("B37VB Light Dependent Resistor (LDR) Demonstration");
  Serial.print("Version: ");
  Serial.println(FIRMWARE_VERSION);
  Serial.println();
}

// Loop function runs over and over again forever
void loop()
{
  Serial.println("Left LDR Circuit:");
  MeasureLDRCircuitVoltage(LDR_L_PIN);
  
  Serial.println("Right LDR Circuit:");
  MeasureLDRCircuitVoltage(LDR_R_PIN);
  
  // Add blocking delay (in ms)
  delay(UPDATE_PERIOD_MS);
}






